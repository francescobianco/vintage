#!/bin/sh
set -eu

# shellcheck disable=SC2034
VERSION=0.1
VINTAGE_PATH=${HOME}/Vintage
ARCHIVE_PATH=${VINTAGE_PATH}/ARCHIVE
DOWNLOAD_PATH=${VINTAGE_PATH}/DOWNLOAD
ALIAS_PATH=${VINTAGE_PATH}/ALIAS

# shellcheck disable=SC1083
parser_definition() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} [global options...] [command] [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    TASK        --task      -- "global flag"
	flag    SILENT   -s --silent    -- "global flag"
  disp    :usage   -h --help
	disp    VERSION     --version

	msg -- '' 'Commands:'
	cmd add -- "subcommand 1"
	cmd version -- "subcommand 2"
	cmd download -- "subcommand 3"
	cmd extract -- "subcommand 4"
	cmd mount -- "subcommand 5"
	cmd copy -- "subcommand 6"
	cmd shim -- "subcommand 7"
  cmd alias -- "subcommand 8"
  cmd exec -- "subcommand 9"
	cmd run -- "subcommand 10"
	cmd shell -- "subcommand 11"
}

# shellcheck disable=SC1083
parser_definition_add() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} add [options...] [archives...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    FLAG_A  -a --flag-a
	disp    :usage  -h --help
}

# shellcheck disable=SC1083
parser_definition_version() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} version [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    FLAG_B  -b --flag-b
	param   RESOLVE -r --resolve
	disp    :usage  -h --help
}

# shellcheck disable=SC1083
parser_definition_download() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} download [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    FLAG_B  -b --flag-b
	param   RESOLVE -r --resolve
	disp    :usage  -h --help
}

# shellcheck disable=SC1083
parser_definition_extract() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} extract [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	param   FILE_FORMAT    --file-format
	disp    :usage      -h --help
}

# shellcheck disable=SC1083
parser_definition_mount() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} mount [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	param   IMAGE_TYPE      --image-type
  param   IMAGE_OFFSET    --image-offset
	disp    :usage       -h --help
}

# shellcheck disable=SC1083
parser_definition_copy() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} copy [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	param   FILE_FORMAT    --file-format
	disp    :usage      -h --help
}

# shellcheck disable=SC1083
parser_definition_shim() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} shim [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	param   FILE_FORMAT    --file-format
	disp    :usage      -h --help
}

# shellcheck disable=SC1083
parser_definition_alias() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} alias [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	param   FILE_FORMAT    --file-format
	disp    :usage      -h --help
}

# shellcheck disable=SC1083
parser_definition_exec() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} exec [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    FLAG_C  -c --flag-c
	disp    :usage  -h --help
}

# shellcheck disable=SC1083
parser_definition_run() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} run [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    TERMINAL  -t --terminal
	disp    :usage    -h --help
}

# shellcheck disable=SC1083
parser_definition_shell() {
	setup   REST help:usage abbr:true -- \
		"Usage: ${2##*/} shell [options...] [arguments...]"
	msg -- '' 'getoptions subcommand example' ''
	msg -- 'Options:'
	flag    TERMINAL  -t --terminal
	disp    :usage    -h --help
}

# shellcheck disable=SC1083
error() {
  echo "$@"
  exit 1
}

eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"

if [ -z "${SILENT}" ]; then
  if [ -z "${TASK}" ]; then
    echo "Vintage ${VERSION} by Francesco Bianco <bianco@javanile.org>"
  else
    echo "==> Task: vintage $@"
  fi
fi

if [ $# -gt 0 ]; then
	cmd=$1
	shift
	case $cmd in
		add)
			eval "$(getoptions parser_definition_add parse "$0")"
			parse "$@"
			eval "set -- $REST"
      while [ $# -gt 0 ]; do
        archive=$(echo $1 | cut -d@ -f1)
        version=$(vintage --silent version "${archive}" --resolve "$(echo $1@main | cut -d@ -f2)")
        [ -z "${version}" ] && error "Program or version not found on archive. Missing '$1', visit <https://github.com/francescobianco/vintage> for more details."
        task="vintage --task exec https://github.com/francescobianco/vintage/raw/main/archive/${archive}/${version}/setup.sh"
        ${task}
      	shift
      done
			;;
		version)
			eval "$(getoptions parser_definition_version parse "$0")"
			parse "$@"
			eval "set -- $REST"
			manifest_dir="${ARCHIVE_PATH}/$1"
			[ ! -d "${manifest_dir}" ] && mkdir -p "${manifest_dir}"
			manifest_file="${ARCHIVE_PATH}/$1/MANIFEST.txt"
			manifest_url="https://raw.githubusercontent.com/francescobianco/vintage/main/archive/$1/MANIFEST.txt"
			curl -sfLo "${manifest_file}" "${manifest_url}"
			[ -z "$RESOLVE" ] && cat "$manifest_file" || cat "$manifest_file" | grep "^$RESOLVE" | head -1
			;;
    download)
      eval "$(getoptions parser_definition_download parse "$0")"
      parse "$@"
      eval "set -- $REST"
      [ ! -d "${DOWNLOAD_PATH}" ] && mkdir -p "${DOWNLOAD_PATH}"
      download="${DOWNLOAD_PATH}/$1.pkg"
      curl -sfLo "${download}" $2
      ;;
    extract)
      eval "$(getoptions parser_definition_extract parse "$0")"
      parse "$@"
      eval "set -- $REST"
      archive="${ARCHIVE_PATH}/$1/$2"
      download="${DOWNLOAD_PATH}/$1.pkg"
      [ ! -d "${archive}" ] && mkdir -p "${archive}"
      #ls -l "${download}"
      cd "$archive"
      case $FILE_FORMAT in
      	7z|7zip)
      	  7za x -y -bsp0 -bso0 "${download}"
      	  ;;
        *)
          unzip -q -o "${download}"
          ;;
      esac
      ;;
    mount)
      eval "$(getoptions parser_definition_mount parse "$0")"
      parse "$@"
      eval "set -- $REST"
      mount="${ARCHIVE_PATH}/$1/$2"
      image="${ARCHIVE_PATH}/$1/$3"
      [ ! -d "${mount}" ] && mkdir -p "${mount}"
      sudo mount -t "${IMAGE_TYPE}" -o "loop,offset=${IMAGE_OFFSET}" "${image}" "${mount}" && true
      ;;
    copy)
      eval "$(getoptions parser_definition_copy parse "$0")"
      parse "$@"
      eval "set -- $REST"
      source="${ARCHIVE_PATH}/$1"
      target="${VINTAGE_PATH}/$2"
      [ ! -d "${target}" ] && mkdir -p "${target}"
      cp -R "${source}/." "${target}"
      ;;
    shim)
      eval "$(getoptions parser_definition_shim parse "$0")"
      parse "$@"
      eval "set -- $REST"
      shim="${VINTAGE_PATH}/$1/__RUN.BAT"
      echo "@echo off" > "${shim}"
      echo "F:" >> "${shim}"
      echo "cd $1" >> "${shim}"
      echo "$2" >> "${shim}"
      ;;
    alias)
      eval "$(getoptions parser_definition_alias parse "$0")"
      parse "$@"
      eval "set -- $REST"
      [ ! -d "${ALIAS_PATH}" ] && mkdir -p "${ALIAS_PATH}"
      alias="${ALIAS_PATH}/$1"
      alias_batch="${ALIAS_PATH}/$1.bat"
      echo "$2" > "${alias}"
      echo "@echo off" > "${alias_batch}"
      echo "$2" >> "${alias_batch}"
      ;;
		exec)
			eval "$(getoptions parser_definition_exec parse "$0")"
			parse "$@"
			eval "set -- $REST"
			temp_dir="$(mktemp -d /tmp/vintage-exec-XXXXXXXX)"
      cd "$temp_dir"
      curl -sfLo setup.sh $1
      . ${temp_dir}/setup.sh
      rm -fr "$temp_dir"
			;;
		run)
			eval "$(getoptions parser_definition_run parse "$0")"
			parse "$@"
			eval "set -- $REST"
			alias=$(cat "${ALIAS_PATH}/$1")
      [ -n "${TERMINAL}" ] && TERMINAL=-t
      dosemu ${TERMINAL} -d "${VINTAGE_PATH}" -E "F:\\${alias}\\__RUN.BAT"
			;;
    shell)
      eval "$(getoptions parser_definition_shell parse "$0")"
      parse "$@"
      eval "set -- $REST"
      [ -n "${TERMINAL}" ] && TERMINAL=-t
      dosemu ${TERMINAL} -d "${VINTAGE_PATH}"
      ;;
		--) # no subcommand, arguments only
	esac
fi
